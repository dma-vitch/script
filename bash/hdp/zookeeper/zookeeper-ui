#!/bin/bash
### BEGIN INIT INFO
# Provides: Zookeeper UI
# Required-Start: $local_fs $network $named $time $syslog
# Required-Stop: $local_fs $network $named $time $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: Zookeeper web application for Zookeeper monitoring
### END INIT INFO

work_dir=/opt/zookeeper-ui
#cmd="nohup java -jar $work_dir/zkui-jar-with-dependencies.jar"
cmd="java -jar zkui-jar-with-dependencies.jar"
user=zookeeper
name=zookeeper-ui
pid_file=$work_dir/$name.pid
log_dir=$work_dir/logs
stdout_log="$log_dir/$name.log"
stderr_log="$log_dir/$name.err"
desc="Zookeeper UI"

# specific to zkui
export config_file="$work_dir/config.cfg"

get_pid() {
    cat "$pid_file"
}

is_running() {
    [ -f "$pid_file" ] && ps $(get_pid) > /dev/null 2>&1
}

del_pidfile() {
	[ -f "$pid_file" ] && rm -f ${pid_file} > /dev/null 2>&1
}

status(){
        printf "%-50s\n" "Checking $name..."
        #if is_running; then
	if [ -f "$pid_file" ]; then
            printf "%s\n" "Checking running $name with pid = $(get_pid)"
            if [ -z "`ps axf | grep ${name} | grep -v grep`" ]; then
                printf "%s\n" "Process dead but pidfile exists"
            else
                echo "Running"
            fi
        else
            printf "%s\n" "Service not running"
        fi
}

check_privilege() {
  if [ "$EUID" -ne 0 ]; then
    echo "Please run as root or with sudo"
    exit 1
  fi
}

# Check that the user exists (if we set a user) Does the user exist?
if [ -n "$user" ] ; then
    if getent passwd | grep -q "^$user:"; then
        # Obtain the uid and gid
        DAEMONUID=$(getent passwd |grep "^$user:" | awk -F : '{print $3}')
        DAEMONGID=$(getent passwd |grep "^$user:" | awk -F : '{print $4}')
    else
        echo "The user $user, required to run $name does not exist."
        exit 1
    fi
fi

# Script needs to be run as root
check_privilege

case "$1" in
    start)
    if is_running; then
        echo "Already started"
    else
        echo "Starting: $name"
        for dir in $(dirname ${pid_file}) ${log_file}
        do
            mkdir -p $dir
            chown -R "$user" $dir
        done
	cd "$work_dir"
        #remove pidfile if not stoped correctly
	del_pidfile
	if [ -z "$user" ]; then
            sudo $cmd >> "$stdout_log" 2>> "$stderr_log" &
        else
            sudo -u "$user" $cmd >> "$stdout_log" 2>> "$stderr_log" &
        fi
        echo $! > "$pid_file"
        if ! is_running; then
            echo "Unable to start, see $stdout_log and $stderr_log"
            exit 1
        fi
    fi
    ;;

    stop)
    if is_running; then
        echo -n "Stopping $name.."
        kill $(get_pid)
        for i in {1..10}
        do
            if ! is_running; then
                break
            fi
            echo -n "."
            sleep 1
        done
        echo
        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "Stopped"
            #remove pidfile
	    del_pidfile
	fi
    else
        echo "Not running"
    fi
    ;;

    restart)
    $0 stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    $0 start
    ;;
    status)
	status
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;; esac
exit 0
