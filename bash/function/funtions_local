#!/bin/bash
#Functions ask confirm fou you doing 
AskYN()
{
local AMSURE
    if [ -n "$1" ] ; then
		read -n 1 -p "$1 (y/[a]): " AMSURE
    else
		read -n 1 -p "Are you sure to continue?(y/[a])<>: " AMSURE
    fi
    echo "" 1>&2
    if [[ "$AMSURE" =~ ^[Yy]$ ]] ;
    then
		return 0
    else
		return 1
    fi
}
#
killtree() 
{
local _pid=$1
local _sig=${2:--TERM}
	kill -stop ${_pid} # needed to stop quickly forking parent from producing children between child killing and parent killing
	for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child} ${_sig}
    done
    kill -${_sig} ${_pid}
}

if [ $# -eq 0 -o $# -gt 2 ]; then
    echo "Usage: $(basename $0) <pid> [signal]"
    exit 1
fi

#killtree $@

# Functions output color messages
function color_str {
case $2 in
    red) printf "\033[1;31m$1\033[0m\n" ;;
    green) printf "\033[1;32m$1\033[0m\n" ;;
esac
}

# Functions get path to execute script
function getpath {
# Full path to script/полный путь до скрипта
local ABSOLUTE_FILENAME=`readlink -e "$0"`
# /dir of script /каталог в котором лежит скрипт
DIRECTORY=`dirname "$ABSOLUTE_FILENAME"`
}

# Functions get version of install java
function v_check_java {
if type -p java; then
#    echo found java executable in PATH
    _java=java
elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then
#    echo found java executable in JAVA_HOME.....
    _java="$JAVA_HOME/bin/java"
else
    echo "no java"
fi

if [[ "$_java" ]]; then
    version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
#    echo version "$version"
    if [[ "$version" > "1.8" ]]; then
        echo version is more than 1.8
    else
        echo version is less than 1.8
    fi
fi
}

# function to check http response code before downloading a remote file
function validate_url(){
  if [[ `wget -S --spider $1  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then echo "true"; fi
}
